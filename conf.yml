# SimCenter Example Roster
# Claudio Perez

##############################################################################
# PREAMBLE
# This section is used to define anchors for commonly repeated inputs/objects.
##############################################################################
INPUT: &INPUT 
  # boiler plate for input.json file 
  $schema: "https://raw.githubusercontent.com/claudioperez/SimCenterDocumentation/examples/docs/common/user_manual/schemas/quoFEM_Schema.json"
  Applications:
    UQ:
      Application: Dakota-UQ
      ApplicationData: {}
  remoteAppDir: "/home1/00477/tg457427/SimCenterBackendApplications/May-2020"
  uqResults: {}
  workingDir: C:/Workdir/quoFEM
  localAppDir: C:/Tools/quoFEM/quoFEM
  python: python

UQ_METHOD:
  FWD_LHS:  &FWD_LHS
    samplingMethodData:
      method: LHS
      samples: 200
      seed:    949
    uqEngine: Dakota
    uqType: Forward Propagation
  CON_CAL:  &CON_CAL
    calibrationMethodData:
      convergenceTol: 1.0e-10
      factors: ""
      maxIterations: 50
      method: NL2SOL
    uqEngine: Dakota
    uqType: Parameters Estimation
  BAY_CAL:  &BAY_CAL
    bayesianCalibrationMethodData:
      burnInSamples: 100
      chainSamples: 400
      chains: 4
      jumpStep: 5
      method: DREAM
      seed: 107
    uqEngine: Dakota
    uqType: Inverse Problem
  REL_SORM: &REL_SORM
    reliabilityMethodData: 
      integrationMethod: Second Order
      levelType: Probability Levels
      localMethod: Most Probable Point
      method: Local Reliability
      mpp_Method: no_approx
      probabilityLevel: [0.02, 0.2, 0.4, 0.6, 0.8, 0.99]
    uqEngine: Dakota
    uqType: Reliability Analysis
  SEN_LHS:  &SEN_LHS
    samplingMethodData:
      method: LHS
      samples: 1000
      seed: 175
    uqEngine: Dakota
    uqType: Sensitivity Analysis

FEM_MODELS:
  TRUSS: &TRUSS
    <<: *INPUT
    fem:
      dir: "{Current_Dir}/."
      inputFile: "{Current_Dir}/model.tcl"
      mainInput: model.tcl
      mainPostprocessScript: 'post.tcl'
      numInputs: 1
      postprocessScript: "{Current_Dir}/post.tcl"
      program: OpenSees
    EDP:
      - name: Node_3_Disp_2
      - name: Node_2_Disp_2
    randomVariables: 
      - name: E
        distribution: Weibull
        refCount: 1
        scaleparam: 210
        shapeparam: 20
        value: RV.E
        variableClass: Uncertain
      - name: P
        distribution: Beta
        alphas: 2
        betas: 2
        lowerbound: 20
        refCount: 1
        upperbound: 30
        value: RV.P
        variableClass: Uncertain
      - name: Ao
        distribution: Lognormal
        mean: 250
        refCount: 1
        stdDev: 50
        value: RV.Ao
        variableClass: Uncertain
      - name: Au
        distribution: Normal
        mean: 500
        refCount: 1
        stdDev: 100
        value: RV.Au
        variableClass: Uncertain
  FRAME: &FRAME
    <<: *INPUT
    fem:
      dir: "{Current_Dir}/."
      inputFile: "{Current_Dir}/fem.tcl"
      mainInput: fem.tcl
      mainPostprocessScript: ""
      numInputs: 1
      postprocessScript: ""
      program: OpenSees
    EDP:
      - name: eps_l1
      - name: eps_l2
      - name: eps_l3
      - name: eps_l4
      - name: eps_l5
      - name: eps_p1
      - name: eps_p2
      - name: eps_p3
      - name: eps_p4
      - name: eps_p5
    randomVariables:
      - name: Ic1
        distribution: ContinuousDesign
        initialpoint: 1500
        lowerbound: 500
        refCount: 2
        upperbound: 2000
        value: RV.Ic1
        variableClass: Design
      - name: Ic2
        distribution: ContinuousDesign
        initialpoint: 500
        lowerbound: 500
        refCount: 2
        upperbound: 2000
        value: RV.Ic2
        variableClass: Design
  ROSEN: &ROSEN
    <<: *INPUT
    fem:
      dir: "{Current_Dir}/."
      inputFile: "{Current_Dir}/rosenbrock.py"
      mainInput: rosenbrock.py
      mainPostprocessScript: ""
      numInputs: 1
      parametersFile: params.py
      parametersScript: "{Current_Dir}/params.py"
      postprocessScript: ""
      program: OpenSeesPy
    EDP:
      - name: f
    randomVariables:
      - name: "x"
        distribution: Uniform
        lowerbound: -2
        refCount: 1
        upperbound: 2
        value: RV.x
        variableClass: Uncertain
      - name: "y"
        distribution: Uniform
        lowerbound: 1.4
        refCount: 1
        upperbound: 1.6
        value: RV.y
        variableClass: Uncertain

FILES:
  truss:
    truss_model_py: &truss_model_py
      loc: truss/model.py
      description: This file is a Python script which takes a given realization of the problem's random variables, and runs a finite element analysis of the truss with OpenSeesPy. It is supplied to the **Input Script** field of the **FEM** tab, and obviates the need for supplying a **Postprocess Script**. When this script is invoked in the workflow, it receives the list of the identifiers supplied in the **QoI** tab through the operating system's `stdout` variable, and a set of random variable realizations by star-importing the **Parameters File** from the **FEM** tab.
    truss_params_py: &truss_params_py 
      loc: truss/params.py
      description: This file is a Python script which defines the problem's random variables as objects in the Python runtime. It is supplied to the **Parameters File** field of the **FEM** tab. *The literal values which are assigned to variables in this file will be varied at runtime by the UQ engine.*
    truss_model_tcl: &truss_model_tcl 
      loc: truss/model.tcl
      description: This file is an OpenSees Tcl script that constructs and runs a finite element analysis of the truss for a given realization of the problem's random variables. It is supplied to the **Input File** field of the **FEM** tab.
    truss_post_tcl: &truss_post_tcl 
      loc: truss/post.tcl
      description: This file is an OpenSees Tcl script that processes the QoI identifiers supplied in the **QoI** tab, and writes the relevant response quantities to `results.out` from an OpenSees process. It is supplied to the **Postprocess File** field of the **FEM** tab.
  rosen:
    rosen_rosen_py: &rosen_rosen_py 
      loc: rosen/rosen.py
      description: This file is a Python script which implements the Rosenbrock function. It is supplied to the **Input Script** field of the **FEM** tab. Because this file write directly to `results.out`, it obviates the need for supplying a **Postprocess Script**. When invoked in the workflow, the Python routine is supplied a set of random variable realizations through the star-import of the script supplied to the **Parameters File** field.
    rosen_params_py: &rosen_params_py 
      loc: rosen/params.py
      description: This file is a Python script which defines the problem's random variables as objects in the Python runtime. It is supplied to the **Parameters File** field of the **FEM** tab. *The literal values which are assigned to variables in this file will be varied at runtime by the UQ engine.*

       
##############################################################################
# quoFEM Examples
##############################################################################
quoFEM:
  - id: quo-01
    title: Forward Propagation - OpenSees/Tcl
    files: [*truss_model_tcl, *truss_post_tcl]
    docs:
      synopsis: This example uses quoFEM to estimate the first and second central moments of a FE model's response, given the marginal distributions of various random parameters.
      statement: Consider the problem of uncertainty quantification in a two-dimensional truss structure shown in the following figure. Two input scripts are used to define a forward propagation procedure to be coordinated by quoFEM which will estimate the mean and standard deviation of the vertical displacement at node 3 using Latin hypercube sampling.
      model_fig: "truss/truss.png"
      results: Various views of the graphical display can be obtained by left- and right-clicking the columns of the tabular data. If a singular column of the tabular data is selected with simultaneous right and left clicks, a frequency and CDF will be displayed, as shown in figure below.
      res_fig: "truss/trussRES5.png"
    srcDir: "truss"
    input:
      <<: *TRUSS
      UQ_Method:  {<<: *FWD_LHS}
  - id: quo-02
    title: Forward Propagation - OpenSeesPy
    docs:
      # files: []
      synopsis: This example illustrates how quoFEM interacts with OpenSeesPy. A simple forward propagation procedure is run to estimate the first and second central moments of a FE model's response, given the marginal distributions of various random parameters.
      statement: Consider the problem of uncertainty quantification in a two-dimensional truss structure shown in the following figure. Two input scripts are used to define a forward propagation procedure to be coordinated by quoFEM which will estimate the mean and standard deviation of the vertical displacement at node 3 using Latin hypercube sampling.
      model_fig: truss/truss.png
      results: Various views of the graphical display can be obtained by left- and right-clicking the columns of the tabular data. If a singular column of the tabular data is selected with simultaneous right and left clicks, a frequency and CDF will be displayed, as shown in figure below.
      res_fig: truss/trussRES5.png
    srcDir: "truss"
    input:
      <<: *TRUSS
      fem:
        dir: "{Current_Dir}/."
        inputFile: "{Current_Dir}/model.py"
        mainInput: model.py
        mainPostprocessScript: ""
        numInputs: 1
        parametersFile: params.py
        parametersScript: "{Current_Dir}/params.py"
        postprocessScript: ""
        program: OpenSeesPy
      UQ_Method: {<<: *FWD_LHS}
  - id: quo-03
    title: Reliability Analysis
    docs:
      synopsis: This example uses quoFEM to perform a second-order reliability analysis (SORM) of an OpenSees FE model.
      statement: Consider the stochastic response of a two-dimensional truss structure shown in the following figure with uncertain section dimensions, material moduli, and loading magnitude. Two input scripts are used to define a [local reliability](/common/user_manual/usage/desktop/DakotaReliability.html) procedure to be coordinated by quoFEM which will estimate response magnitudes whose probabilities of exceedance are 0.02, 0.2, 0.4, 0.6, 0.8, and 0.99.
      model_fig: truss/truss.png
      results: ~
      res_fig: truss/trussSORM-RES.png
    srcDir: "truss"
    input:
      <<: *TRUSS
      UQ_Method: {<<: *REL_SORM}
  - id: quo-04
    title: Sensitivity Analysis
    docs:
      synopsis: This example uses quoFEM to perform a global sensitivity analysis of an OpenSees FE model.
      statement: Consider a stochastic model of a two-dimensional truss structure like that shown in the following figure. A [sensitivity analysis](/common/user_manual/usage/desktop/DakotaSensitivity.html) procedure is coordinated by quoFEM which will estimate the sensitivities of the response quantities of interest with respect to the problem's random variables.
      model_fig: truss/truss.png
      results: ~
      res_fig: ~
    srcDir: "truss"
    input:
      <<: *TRUSS
      UQ_Method: {<<: *SEN_LHS}
  - id: quo-05
    title: Non-structural problems with Python
    docs: &rosenbrock
      synopsis: This example illustrates how Python scripting can be used with quoFEM to express general mathematical models without the use of a dedicated finite element analysis engine.
      statement: >
        The Rosenbrock function is a *test function* that is often used to evaluate numerical optimization algorithms.

        $$
        f(x, y)=(a-x)^{2}+b\left(y-x^{2}\right)^{2}
        $$

      model_fig: ~
      results: ~
      res_fig: ~
    srcDir: "rosenbrock"
    input:
      <<: *ROSEN
      UQ_Method: {<<: *FWD_LHS}
  - id: quo-06
    title: Optimization
    docs:
      << : *rosenbrock
      synopsis: In this example, quoFEM is used to solve a classical optimization problem, for which an analytic solution is known.
      results: ~
    srcDir: "rosenbrock"
    input:
      <<: *ROSEN
      UQ_Method: {<<: *CON_CAL}
  - id: quo-07
    name: Conventional Calibration - Steel Frame
    srcDir: "frame"
    input:
      <<: *FRAME
      UQ_Method: {<<: *CON_CAL}
  - id: quo-08
    name: Bayesian Calibration - Steel Frame
    srcDir: "frame"
    input:
      <<: *FRAME
      UQ_Method: {<<: *BAY_CAL}
  - id: quo-09
    name: Forward Propagation - FEAP
    srcDir: "truss"
    input:
      <<: *TRUSS
      fem:
        dir: "{Current_Dir}/."
        inputFile: "{Current_Dir}/model.tcl"
        mainInput: model.py
        mainPostprocessScript: 'FEAP_post.py'
        numInputs: 1
        postprocessScript: ""
        program: FEAPpv
      UQ_Method:  {<<: *FWD_LHS}


