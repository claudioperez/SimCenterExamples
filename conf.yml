# SimCenter Example Roster
# Claudio Perez

##############################################################################
# YAML PREAMBLE
# This section is used to define anchors for commonly repeated inputs/objects.
##############################################################################
INPUT: &INPUT
  # boiler plate for input.json file 
  $schema: "https://raw.githubusercontent.com/claudioperez/SimCenterDocumentation/examples/docs/common/user_manual/schemas/quoFEM_Schema.json"
  Applications:
    UQ:
      Application: Dakota-UQ
      ApplicationData: {}
  remoteAppDir: "/home1/00477/tg457427/SimCenterBackendApplications/May-2020"
  uqResults: {}
  workingDir: C:/Workdir/quoFEM
  localAppDir: C:/Tools/quoFEM/quoFEM
  python: python
  # python: C:\Users\claud\Anaconda3\python.exe

UQ_METHOD:
  FWD_LHS:  &FWD_LHS
    samplingMethodData:
      method: LHS
      samples: 200
      seed:    949
    uqEngine: Dakota
    uqType: Forward Propagation
  CON_CAL:  &CON_CAL
    calibrationMethodData:
      convergenceTol: 1.0e-10
      factors: ""
      maxIterations: 50
      method: NL2SOL
    uqEngine: Dakota
    uqType: Parameters Estimation
  BAY_CAL:  &BAY_CAL
    bayesianCalibrationMethodData:
      burnInSamples: 100
      chainSamples: 400
      chains: 4
      jumpStep: 5
      method: DREAM
      seed: 107
    uqEngine: Dakota
    uqType: Inverse Problem
  REL_SORM: &REL_SORM
    reliabilityMethodData: 
      integrationMethod: Second Order
      levelType: Probability Levels
      localMethod: Most Probable Point
      method: Local Reliability
      mpp_Method: no_approx
      probabilityLevel: [0.02, 0.2, 0.4, 0.6, 0.8, 0.99]
    uqEngine: Dakota
    uqType: Reliability Analysis
  SEN_LHS:  &SEN_LHS
    samplingMethodData:
      method: LHS
      samples: 100
      seed: 175
    uqEngine: Dakota
    uqType: Sensitivity Analysis

FE_MODELS:
  TRUSS: &TRUSS
    <<: *INPUT
    fem:
      dir: "{Current_Dir}/."
      inputFile: "{Current_Dir}/model.tcl"
      mainInput: model.tcl
      mainPostprocessScript: "post.tcl"
      numInputs: 1
      postprocessScript: "{Current_Dir}/post.tcl"
      parametersFile: ""
      parametersScript: ""
      program: OpenSees
    EDP:
      - name: Node_3_Disp_2
      - name: Node_2_Disp_2
    randomVariables: 
      - name: E
        title: elastic modulus
        distribution: Weibull
        refCount: 1
        scaleparam: 210.0
        shapeparam: 20.0
        value: RV.E
        variableClass: Uncertain
      - name: P
        title: load magnitude
        distribution: Beta
        alphas: 2.0
        betas: 2.0
        lowerbound: 20.0
        refCount: 1
        upperbound: 30.0
        value: RV.P
        variableClass: Uncertain
      - name: Ao
        title: cross sectional area for the other six bars
        distribution: Lognormal
        mean: 250.0
        refCount: 1
        stdDev: 50.0
        value: RV.Ao
        variableClass: Uncertain
      - name: Au
        title: cross sectional area for the upper three bars
        distribution: Normal
        mean: 500.0
        refCount: 1
        stdDev: 100.0
        value: RV.Au
        variableClass: Uncertain
  FRAME: &FRAME
    <<: *INPUT
    fem:
      dir: "{Current_Dir}/."
      inputFile: "{Current_Dir}/fem.tcl"
      mainInput: fem.tcl
      mainPostprocessScript: ""
      numInputs: 1
      postprocessScript: ""
      parametersFile: ""
      parametersScript: ""
      program: OpenSees
    EDP:
      - name: eps_l1
      - name: eps_l2
      - name: eps_l3
      - name: eps_l4
      - name: eps_l5
      - name: eps_p1
      - name: eps_p2
      - name: eps_p3
      - name: eps_p4
      - name: eps_p5
  ROSEN: &ROSEN
    <<: *INPUT
    fem:
      dir: "{Current_Dir}/."
      inputFile: "{Current_Dir}/rosenbrock.py"
      mainInput: rosenbrock.py
      mainPostprocessScript: ""
      numInputs: 1
      parametersFile: params.py
      parametersScript: "{Current_Dir}/params.py"
      postprocessScript: ""
      program: OpenSeesPy
    EDP:
      - name: f
    randomVariables:
      - name: "X"
        title: "first variable"
        distribution: Uniform
        lowerbound: -2.0
        refCount: 1
        upperbound: 2.0
        value: RV.X
        variableClass: Uncertain
      - name: "Y"
        title: "second variable"
        distribution: Uniform
        lowerbound: 1.4
        refCount: 1
        upperbound: 1.6
        value: RV.Y
        variableClass: Uncertain

FILES:
  truss:
    truss_model_py: &truss_model_py
      loc: truss/model.py
      description: "This file is a Python script which takes a given realization of the problem's random variables, and runs a finite element analysis of the truss with OpenSeesPy. It is supplied to the **Input Script** field of the **FEM** tab, and obviates the need for supplying a **Postprocess Script**. When this script is invoked in the workflow, it receives the list of the identifiers supplied in the **QoI** tab through the operating system's `stdout` variable, and a set of random variable realizations by star-importing the **Parameters File** from the **FEM** tab."
    truss_params_py: &truss_params_py
      loc: truss/params.py
      description: "This file is a Python script which defines the problem's random variables as objects in the Python runtime. It is supplied to the **Parameters File** field of the **FEM** tab. *The literal values which are assigned to variables in this file will be varied at runtime by the UQ engine.*"
    truss_model_tcl: &truss_model_tcl 
      loc: truss/model.tcl
      description: This file is an OpenSees Tcl script that constructs and runs a finite element analysis of the truss for a given realization of the problem's random variables. It is supplied to the **Input File** field of the **FEM** tab.
    truss_post_tcl: &truss_post_tcl
      loc: truss/post.tcl
      description: This file is an OpenSees Tcl script that processes the QoI identifiers supplied in the **QoI** tab, and writes the relevant response quantities to `results.out` from an OpenSees process. It is supplied to the **Postprocess File** field of the **FEM** tab.
  rosen:
    rosen_rosen_py: &rosen_rosen_py 
      loc: rosenbrock/rosenbrock.py
      description: This file is a Python script which implements the Rosenbrock function. It is supplied to the **Input Script** field of the **FEM** tab. Because this file write directly to `results.out`, it obviates the need for supplying a **Postprocess Script**. When invoked in the workflow, the Python routine is supplied a set of random variable realizations through the star-import of the script supplied to the **Parameters File** field.
    rosen_params_py: &rosen_params_py 
      loc: rosenbrock/params.py
      description: This file is a Python script which defines the problem's random variables as objects in the Python runtime. It is supplied to the **Parameters File** field of the **FEM** tab. *The literal values which are assigned to variables in this file will be varied at runtime by the UQ engine.*

  frame:
    frame_model_tcl: &frame_model_tcl
      loc: frame/fem.tcl
      description: This file is an OpenSees Tcl script that defines a FE model for a given realization, runs an analysis, and creates a `results.out` fils. As a consequence, no postprocessing script is needed. The values placed in `results.out` file are the difference between computed and observed values. Expressed another way, the function `f(m1,m2)` computed and written to the `results.out` file is `f(m1,m2) = ObservedPeriods - ComputedPeriods(m1,m2)`. The UQ algorithm when running is searching for values of the random variable parameters (`m1` and `m2`) that minimize this loss function. The user must take this fact into account when formulating the output from their own scripts for their own problems.
    
##############################################################################
# quoFEM Examples
##############################################################################
quoFEM:
  - id: quo-01
    title: Forward Propagation - OpenSees/Tcl
    files: [*truss_model_tcl, *truss_post_tcl]
    docs:
      synopsis: This example uses quoFEM to estimate the first and second central moments of a FE model's response, given the marginal distributions of various random parameters.
      statement: |
        Consider the problem of uncertainty quantification in a two-dimensional truss structure shown in the following figure. Two input scripts are used to define a forward propagation procedure to be coordinated by quoFEM which will estimate the mean and standard deviation of the vertical displacement at node 3 using Latin hypercube sampling.

        ![](truss/truss.png)
      rv: |
        The following parameters are defined in the **RV** tab:
      results:  |
        The results from this analysis with a maximum of $200$ iterations are as follows: 
        **Node 3**:

        - $\mu = 7.6986$
        - $\sigma = 1.5666$

        **Node 2**:

        - $\mu = 9.3967$
        - $\sigma = 1.8628$

        If the user selects **Data** in the **RES** tab, they will be presented with both a graphical plot and a tabular listing of the data.Various views of the graphical display can be obtained by left- and right-clicking the columns of the tabular data. If a singular column of the tabular data is selected with simultaneous right and left clicks, a frequency and CDF will be displayed.
      
        <!-- ![Stochastic truss results.]("truss/trussRES5.png") -->
    input:
      <<: *TRUSS
      UQ_Method:  {<<: *FWD_LHS}
  - id: quo-02
    title: Forward Propagation - OpenSeesPy
    files: [*truss_model_py, *truss_params_py]
    docs:
      synopsis: This example illustrates how quoFEM interacts with OpenSeesPy. A simple forward propagation procedure is run to estimate the first and second central moments of a FE model's response, given the marginal distributions of various random parameters.
      statement: >
        Consider the problem of uncertainty quantification in a two-dimensional truss structure shown in the following figure. Two input scripts are used to define a forward propagation procedure to be coordinated by quoFEM which will estimate the mean and standard deviation of the vertical displacement at node 3 using Latin hypercube sampling.

        ![](truss/truss.png)
        
      results: |
        Various views of the graphical display can be obtained by left- and right-clicking the columns of the tabular data. If a singular column of the tabular data is selected with simultaneous right- and left-clicks, a frequency and CDF will be displayed, as shown in figure below.

        ![truss/trussRES5.png]()
    input:
      <<: *TRUSS
      fem:
        dir: "{Current_Dir}/."
        inputFile: "{Current_Dir}/model.py"
        mainInput: model.py
        mainPostprocessScript: ""
        numInputs: 1
        parametersFile: params.py
        parametersScript: "{Current_Dir}/params.py"
        postprocessScript: ""
        program: OpenSeesPy
      UQ_Method: {<<: *FWD_LHS}
  - id: quo-03
    title: Reliability Analysis
    files: [*truss_model_tcl, *truss_post_tcl]
    docs:
      synopsis: This example uses quoFEM to perform a second-order reliability analysis (SORM) of an OpenSees FE model.
      statement: >
        Consider the stochastic response of a two-dimensional truss structure shown in the following figure with uncertain section dimensions, material moduli, and loading magnitude. Two input scripts are used to define a [local reliability](/common/user_manual/usage/desktop/DakotaReliability.html) procedure to be coordinated by quoFEM which will estimate response magnitudes whose probabilities of exceedance are 0.02, 0.2, 0.4, 0.6, 0.8, and 0.99.

        ![](truss/truss.png)

      results: ~
    input:
      <<: *TRUSS
      UQ_Method: {<<: *REL_SORM}
  - id: quo-04
    title: Sensitivity Analysis
    files: [*truss_model_tcl, *truss_post_tcl]
    docs:
      synopsis: This example uses quoFEM to perform a global sensitivity analysis of an OpenSees FE model.
      statement: >
        Consider a stochastic model of a two-dimensional truss structure like that shown in the following figure. A [sensitivity analysis](/common/user_manual/usage/desktop/DakotaSensitivity.html) procedure is coordinated by quoFEM which will estimate the sensitivities of the response quantities of interest with respect to the problem's random variables.

        ![Truss schematic diagram](truss/truss.png)

      results: ~
    input:
      <<: *TRUSS
      UQ_Method: {<<: *SEN_LHS}
  - id: quo-05
    title: Basic modeling with Python
    files: [*rosen_rosen_py, *rosen_params_py]
    docs: &rosenbrock
      synopsis: This example illustrates how Python scripting can be used with quoFEM to express general mathematical models without the use of a dedicated finite element analysis engine. 
      statement: >
        The Rosenbrock function is a *test function* that is often used to evaluate numerical optimization algorithms. It is given by the following expression:

        $$
        g(x, y)=(a-x)^{2}+b\left(y-x^{2}\right)^{2}
        $$

      rv: |
        A forward propagation analysis will be conducted to numerically integrate the first and second moments of a random variable whose value is obtained by applying the Rosenbrock function to the two following statistically independent random variables: 
      uq: |
        The objective of this UQ problem is to numerically integrate the following integrals with a forward propagation routine:

        $$ 
        \mu_g = \mathbf{E}[g(X,Y)] = \int^{1.6}_{1.4} \int^{2.0}_{-2.0} g(x,y) f_{XY} (x,y) dx dy
        $$
        
        $$
        \begin{align}
        \sigma_g^2 &= \mathbf{E}[(g(X,Y)-\mathbf{E}[g(X,Y)])^2] \\
        &= \int^{1.6}_{1.4} \int^{2.0}_{-2.0} (g(x,y)-\mathbf{E}[g(X,Y)])^2f_{XY} (x,y) dx dy
        \end{align}
        $$

        where $f_{XY}(x,y)$ is the joint probability density function of the random variables $X$ and $Y$.

        This procedure is implemented with a Latin hypercube sampling routine in quoFEM by entering the following inputs in the **UQ** tab:

      fem: |
        For this forward propagation problem, we need to define a Python script that will import a set of random variable values, apply them to the Rosenbrock function, then write the results to a file named `results.out` for every random variable realization generated by Dakota. To this end, we begin by defining our random variables as Python objects as follows, and supplying this as a `.py` script in the **Parameters File** field of the **FEM** tab.:

        ```python
        X = 0.0
        Y = 0.0
        ```

        Although this file will later be used as a Python module, it is important to note that in the quoFEM workflow, it is NOT handled as a true Python script. Rather, it can be thought of loosely as analogous to a C "header file" in that it simply gives us an interface to Dakota from Python. The values assigned to the variables at this point will not be used.

        > **Note**: The **Parameters File** is not a true Python script; For the time being, until further documentation about the tool is developed, users should only use line-by-line variable definitions in this file. Python assignments like `X, Y = 0.0, 0.0` are not supported. 

        We can now implement our model for the **Input File** which will begin with a star-import from the parameters file we just created. Assuming that file was named `params.py`, this import would look like so:
      
        ```python 
        from params import *
        ``` 

        Next we define the following simple function which evaluates the Rosenbrock function:

        ```python 
        def rosenbrock(x, y):
            a = 1.
            b = 100.
            return (a - x)**2.0 + b*(y - x**2.)**2.
        ``` 

        Finally, we apply our `rosenbrock` function to the variables we imported from `params`, and write the results to a file called `results.out`. Note that throughout the forward propagation routine, the values assigned to the variables `X` and `Y` in the  `params` interface are varied by the workflow application.

        ```python
        with open('results.out', 'w') as f:
            result = rosenbrock(X, Y)
            f.write('{:.60g}'.format(result))
        ```

        The code from these steps is colleted and made available for download in the following files:
      results: |
        The result for a forward propagation run with a maximum of $200$ iterations is: 

        $$ 
        \mu_g = 146.519 \\ 
        \sigma_g = 134.01  
        $$
      solution: |
        Because the random variables of this problem are assumed to be statistically independent, the joint PDF $p_{XY}$

          
        $$\int f(x,y)dx = -\frac{1}{3}\left(a-x\right)^3+b\left(-\frac{1}{3}x^5+\frac{8x^5}{15}-\frac{2}{3}yx^3+y^2x\right)+C$$

        $$\int f(x,y)dy = a^2y-2axy+x^2y+bx^4y-bx^2y^2+\frac{by^3}{3}+C$$

        $$Cy+b\left(\frac{8x^5}{15}y-\frac{1}{3}x^5y+\frac{xy^3}{3}-\frac{x^3y^2}{3}\right)-\left(a-x\right)^3\frac{1}{3}y+C$$

        $$
        y^{(1)}=x^2+i\sqrt{\frac{a^2+x^2-z-2ax}{b}},\\
        yy^{(2)}=x^2-i\sqrt{\frac{a^2+x^2-z-2ax}{b}}
        $$
    input:
      <<: *ROSEN
      UQ_Method: {<<: *FWD_LHS}
  - id: quo-06
    title: Optimization
    files: [*rosen_rosen_py, *rosen_params_py]
    docs:
      # << : *rosenbrock
      synopsis: In this example, a **parameter estimation** routine is used to solve a classical optimization problem for which an analytic solution is known.
      statement: >
        The Rosenbrock function is a *test function* that is often used to evaluate numerical optimization algorithms. It is given by the following expression:

        $$
        f(x, y)=(a-x)^{2}+b\left(y-x^{2}\right)^{2}
        $$

      results: |
        With $50$ iterations, our solution converges to $x= 1.1829$ and $y=1.4$
    input:
      <<: *ROSEN
      UQ_Method: {<<: *CON_CAL}
      randomVariables:
        - name: "X"
          title: "first variable"
          distribution: Uniform
          lowerbound: -2.0
          refCount: 1
          upperbound: 2.0
          value: RV.X
          variableClass: Uncertain
        - name: "Y"
          title: "second variable"
          distribution: Uniform
          lowerbound: -2.0
          refCount: 1
          upperbound: 2.0
          value: RV.Y
          variableClass: Uncertain
  - id: quo-07
    title: Conventional Calibration - Steel Frame
    files: [*frame_model_tcl]
    docs:
      synopsis: In this example, a parameter estimation routine is used to estimate column stiffnesses of a simple steel frame, given data about it's mode shapes and mass distribution.
      statement: |
        Provided by Professor Joel Conte and his doctoral students Maitreya Kurumbhati and Mukesh Ramancha from UC San Diego, this example looks at the following simplified finite element model of a steel building.

        ![](frame/frameFE.png) \
        
        Each floor slab of the building is made of composite metal deck and is supported on four steel columns. The story heights are measured at $10'$ and in plan the side lengths measure $33'-4"$ by $30'$. Properties of the steel columns are taken deterministically  with an elastic modulus of $29,000 \mathrm{ksi}$, area of $110 \mathrm{in}^2$, and principal moment of inertial ($I_{yy}$) of $1190 \mathrm{ in}^4$. For modelling purposes, the four columns are assumed fixed at the base and the beams connecting them are assumed to be rigid. The first two vibration periods of the structure are determined to be $0.19 sec$ and $0.09 sec$. 

        Using these properties, the following set of mode shapes and frequencies are generated by applying random perturbations to the analytic modal properties in order to simulate field data that might be obtained using a method for structural system identification. 

        $$\begin{array}{l}
        \lambda_{1}^{(1)}=1025.21, \lambda_{1}^{(2)}=1138.11, \quad \lambda_{1}^{(3)}=1099.39, \quad \lambda_{1}^{(4)}=1002.41, \quad \lambda_{1}^{(5)}=1052.69 \\
        \phi_{12}^{(1)}=1.53, \quad \phi_{12}^{(2)}=1.24, \quad \phi_{12}^{(3)}=1.38, \quad \phi_{12}^{(4)}=1.50, \quad \phi_{12}^{(5)}=1.35
        \end{array}$$

        Our goal will be to reobtain the original column moments of inertia from this data using a conventional calibration procedure.
      rv: |
        The unknown quantities of interest are the moments of inertia for the first and second story columns (`Ic1` and `Ic2` respectively). Using the following bounds and initial estimates, these parameters are defined as follows in the **RV** tab of quoFEM:

      results: |
        Once the analysis is complete the **RES** tab will be automatically selected and the results will be displayed as shown in the figure below. 
        
        Our estimates for the column stiffnesses, `Ic1` and `Ic2` are **1168.83** and **1211.25** respectively.
    input:
      <<: *FRAME
      UQ_Method: {<<: *CON_CAL}
      randomVariables:
        - name: Ic1
          distribution: ContinuousDesign
          title: first story column moment of inertia
          initialpoint: 1500.0
          lowerbound: 500.0
          refCount: 2
          upperbound: 2000.0
          value: RV.Ic1
          variableClass: Design
        - name: Ic2
          distribution: ContinuousDesign
          title: second story column moment of inertia
          initialpoint: 500.0
          lowerbound: 500.0
          refCount: 2
          upperbound: 2000.0
          value: RV.Ic2
          variableClass: Design
  - id: quo-08
    title: Bayesian Calibration - Steel Frame
    files: [*frame_model_tcl]
    docs:
      synopsis: In this example, Bayesian estimation is used to estimate column stiffnesses of a simple steel frame, given data about it's mode shapes and mass distribution.
      statement: |
        Provided by Professor Joel Conte and his doctoral students Maitreya Kurumbhati and Mukesh Ramancha from UC San Diego, this example looks at the following simplified finite element model of a steel building.

        ![](frame/frameFE.png) \
        
        Each floor slab of the building is made of composite metal deck and is supported on four steel columns. The story heights are measured at $10'$ and in plan the side lengths measure $33'-4"$ by $30'$. Properties of the steel columns are taken deterministically  with an elastic modulus of $29,000 \mathrm{ksi}$, area of $110 \mathrm{in}^2$, and principal moment of inertial ($I_{xx}$) of $1190 \mathrm{in}^4$. For modelling purposes, the four columns are assumed fixed at the base and the beams connecting them are assumed to be rigid. The first two vibration periods of the structure are determined to be $0.19 sec$ and $0.09 sec$.

        Using these properties, the following set of mode shapes and frequencies are generated by applying random perturbations to the analytic modal properties in order to simulate field data that might be obtained using a method for structural system identification. 

        $$\begin{array}{l}
        \lambda_{1}^{(1)}=1025.21, \lambda_{1}^{(2)}=1138.11, \quad \lambda_{1}^{(3)}=1099.39, \quad \lambda_{1}^{(4)}=1002.41, \quad \lambda_{1}^{(5)}=1052.69 \\
        \phi_{12}^{(1)}=1.53, \quad \phi_{12}^{(2)}=1.24, \quad \phi_{12}^{(3)}=1.38, \quad \phi_{12}^{(4)}=1.50, \quad \phi_{12}^{(5)}=1.35
        \end{array}$$

        Our goal will be to reobtain the original column moments of inertia from this data using a Bayesian calibration procedure. 
      rv: |
        The unknown quantities of interest are the moments of inertia for the first and second story columns (`Ic1` and `Ic2` respectively). Using the following bounds and initial estimates, these parameters are defined as follows in the **RV** tab of quoFEM:

      results: |
        Once the analysis is complete the **RES** tab will be automatically selected and the results will be displayed. 
        
        Our estimates for the column stiffnesses, `Ic1` and `Ic2` are .
    input:
      <<: *FRAME
      UQ_Method: {<<: *BAY_CAL}
      randomVariables:
        - name: Ic1
          distribution: Uniform
          title: first story column moment of inertia
          # initialpoint: 1500.0
          lowerbound: 500.0
          refCount: 2
          upperbound: 2000.0
          value: RV.Ic1
          variableClass: Uncertain
        - name: Ic2
          distribution: Uniform
          title: second story column moment of inertia
          # initialpoint: 500.0
          lowerbound: 500.0
          refCount: 2
          upperbound: 2000.0
          value: RV.Ic2
          variableClass: Uncertain
  - id: quo-09
    title: Forward Propagation - FEAP
    input:
      <<: *TRUSS
      fem:
        dir: "{Current_Dir}/."
        inputFile: "{Current_Dir}/model.tcl"
        mainInput: model.py
        mainPostprocessScript: 'FEAP_post.py'
        numInputs: 1
        postprocessScript: ""
        program: FEAPpv
      UQ_Method:  {<<: *FWD_LHS}
